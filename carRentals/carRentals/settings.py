"""
Django settings for carRentals project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
import environ
from decouple import config
from pathlib import Path


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# env = environ.Env()


# environ.Env.read_env()


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG")

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'accounts',
    'showroom',
]


LOGIN_REDIRECT_URL = 'home'  # Replace 'home' with your desired redirect URL after login
LOGOUT_REDIRECT_URL = 'login'  # Replace 'login' with your desired redirect URL after logout

AUTH_USER_MODEL = 'accounts.User'


# settings.py

EMAIL_BACKEND = config("EMAIL_BACKEND", default='django.core.mail.backends.smtp.EmailBackend')
EMAIL_HOST = config("EMAIL_HOST")
EMAIL_PORT = config("EMAIL_PORT", cast=int)
EMAIL_USE_TLS = config("EMAIL_USE_TLS", cast=bool)
EMAIL_HOST_USER = config("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = config("EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = config("DEFAULT_FROM_EMAIL")


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'carRentals.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'carRentals.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases


'''
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
'''

# Render PostgreSQL database (live)
import dj_database_url

DATABASES = {
    'default': dj_database_url.parse(config('DATABASE_URL'))
    }


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

STATIC_ROOT = BASE_DIR / "staticfiles"

# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')



MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

STORAGES = {
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# AWS_ACCESS_KEY= config('AWS_ACCESS_KEY')
# AWS_SECRET_ACCESS_KEY= config('AWS_SECRET_ACCESS_KEY')
# AWS_STORAGE_BUCKET_NAME= config('AWS_STORAGE_BUCKET_NAME')
# AWS_S3_SIGNATURE_NAME='s3v4'
# AWS_S3_REGION_NAME=config('AWS_S3_REGION_NAME')
# AWS_S3_FILE_OVERWRITE= False
# AWS_DEFAULT_ACL=None
# AWS_S3_VERITY= True
# DEFAULT_FILE_STORAGE= config('DEFAULT_FILE_STORAGE')


# AWS_ACCESS_KEY='AKIATCKARGPBCAOXA5XA'
# AWS_SECRET_ACCESS_KEY='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'
# AWS_STORAGE_BUCKET_NAME='carrentalbkt'
# AWS_CUSTOM_DOMAIN='%s.s3.amazonaws.com'%AWS_STORAGE_BUCKET_NAME
# AWS_S3_SIGNATURE_NAME='s3v4'
# AWS_S3_REGION_NAME='eu-north-1'
# AWS_S3_FILE_OVERWRITE= False
# AWS_DEFAULT_ACL=None
# AWS_S3_VERITY= True
# DEFAULT_FILE_STORAGE='storages.backends.s3boto3.S3Boto3Storage'

# STORAGES = {
#     # Media file (image) management
#     'default': {
#         'BACKEND': 'storages.backends.s3boto3.S3StaticStorage',

#         },
#         'static': {
#             'BACKEND': 'storages.backends.s3boto3.S3StaticStorage',             
            
# },
#         'staticfiles': {
#             'BACKEND': 'storages.backends.s3boto3.S3StaticStorage',
#         }
# }